-- Load the Library
local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()

-- Create a Window
local Library_Window = Library.Add_Window('Acceptions')

-- Create a Tab for "Blatant"
local Blatant_Tab = Library_Window.Create_Tab({
    name = 'Blatant',
    icon = 'rbxassetid://'
})

-- Create a Section inside the Blatant Tab
local Blatant_Section = Blatant_Tab.Create_Section()

-- Create the Auto Parry Dropdown Toggle
local Auto_Parry = Blatant_Section.Create_DropToggle({
    name = 'Auto Parry',
    section = 'left',
    flag = 'Auto_Parry',
    options = {'Custom', 'Random', 'Backwards'},  -- Options for the dropdown
    callback = function(state)
        if state then
            print('ap - true')  -- Will print when Auto Parry is enabled
        else
            print('ap - false')  -- Will print when Auto Parry is disabled
        end
    end,
    callback2 = function(selected)
        print('Selected:', selected)  -- Will print the selected option from the dropdown
    end
})

-- Create a Tab for "Arsenal"
local Arsenal_Tab = Library_Window.Create_Tab({
    name = 'Arsenal',
    icon = 'rbxassetid://'
})

-- Create a Section inside the Arsenal Tab
local Arsenal_Section = Arsenal_Tab.Create_Section()

-- Store the RenderStepped connections for Aimbot and Silent Aimbot
local aimbotConnection
local silentAimbotConnection

-- Aimbot Toggle
local Aimbot = Arsenal_Section.Create_Toggle({
    name = 'Aimbot',
    flag = 'Aimbot',
    callback = function(state)
        if state then
            print('Aimbot activated')
            -- Aimbot logic (aiming at closest target)
            aimbotConnection = game:GetService("RunService").RenderStepped:Connect(function()
                local closestPlayer = nil
                local shortestDistance = math.huge
                for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= game.Players.LocalPlayer then
                        local distance = (player.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                        if distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                        end
                    end
                end
                if closestPlayer then
                    -- Aim at the closest player
                    local character = closestPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local targetPosition = character.HumanoidRootPart.Position
                        -- Smooth aiming
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, targetPosition)
                    end
                end
            end)
        else
            print('Aimbot deactivated')
            -- Disconnect the RenderStepped connection when the aimbot is disabled
            if aimbotConnection then
                aimbotConnection:Disconnect()
                aimbotConnection = nil
            end
        end
    end
})

-- Silent Aimbot Toggle
local Silent_Aimbot = Arsenal_Section.Create_Toggle({
    name = 'Silent Aimbot',
    flag = 'Silent_Aimbot',
    callback = function(state)
        if state then
            print('Silent Aimbot activated')
            -- Silent Aimbot logic (smooth aiming without snapping the camera)
            silentAimbotConnection = game:GetService("RunService").RenderStepped:Connect(function()
                local closestPlayer = nil
                local shortestDistance = math.huge
                for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= game.Players.LocalPlayer then
                        local distance = (player.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                        if distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                        end
                    end
                end
                if closestPlayer then
                    -- Smoothly aim towards the closest player
                    local character = closestPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local targetPosition = character.HumanoidRootPart.Position
                        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                        local direction = (targetPosition - currentPos).unit
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(currentPos + direction * 0.5)
                    end
                end
            end)
        else
            print('Silent Aimbot deactivated')
            -- Disconnect the RenderStepped connection when silent aimbot is disabled
            if silentAimbotConnection then
                silentAimbotConnection:Disconnect()
                silentAimbotConnection = nil
            end
        end
    end
})

-- Wallhack Toggle
local Wallhack = Arsenal_Section.Create_Toggle({
    name = 'Wallhack',
    flag = 'Wallhack',
    callback = function(state)
        if state then
            print('Wallhack enabled')
            -- Enable Wallhack (changing transparency of parts to make them visible through walls)
            for _, part in pairs(workspace:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    part.Transparency = 0.5  -- Make parts semi-transparent
                end
            end
        else
            print('Wallhack disabled')
            -- Reset Wallhack
            for _, part in pairs(workspace:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                    part.Transparency = 0  -- Reset transparency
                end
            end
        end
    end
})

-- ESP (Extra Sensory Perception) Toggle
local ESP = Arsenal_Section.Create_Toggle({
    name = 'ESP',
    flag = 'ESP',
    callback = function(state)
        if state then
            print('ESP enabled')
            -- Enable ESP (creating outlines above players)
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local billboard = Instance.new("BillboardGui")
                    billboard.Parent = player.Character
                    billboard.Adornee = player.Character.HumanoidRootPart
                    billboard.Size = UDim2.new(0, 50, 0, 50)
                    billboard.StudsOffset = Vector3.new(0, 2, 0)
                    local textLabel = Instance.new("TextLabel")
                    textLabel.Parent = billboard
                    textLabel.Size = UDim2.new(1, 0, 1, 0)
                    textLabel.BackgroundTransparency = 1
                    textLabel.Text = player.Name
                    textLabel.TextColor3 = Color3.new(1, 0, 0)  -- Red text color
                end
            end
        else
            print('ESP disabled')
            -- Remove ESP
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character then
                    local billboard = player.Character:FindFirstChild("BillboardGui")
                    if billboard then
                        billboard:Destroy()
                    end
                end
            end
        end
    end
})
