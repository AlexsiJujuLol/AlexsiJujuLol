-- Load necessary services
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local workspace = game:GetService("Workspace")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")

-- Load the Cloud UI Library
local success, Library = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()
end)

if not success then
    warn("Failed to load Cloud UI Library: " .. Library)
    return
end

local Library_Window = Library.Add_Window('Auto Parry & Clicker Settings')

-- Variables for Auto-Parry and Auto-Click
local auto_parry_enabled = false
local auto_click_enabled = false
local auto_parry_distance = 10
local parry_delay = 0.1
local click_distance = 5
local click_interval = 0.1
local show_parry_circle = false
local parry_circle = nil
local last_parry_time = 0
local last_click_time = 0
local ToggleKey = Enum.KeyCode.Z -- Key to toggle Auto-Parry

-- Function to update the parry circle's position and size
local function UpdateParryCircle()
    if not show_parry_circle then
        if parry_circle then
            parry_circle:Destroy()
            parry_circle = nil
        end
        return
    end

    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end

    if not parry_circle then
        parry_circle = Instance.new("Part")
        parry_circle.Shape = Enum.PartType.Cylinder
        parry_circle.Anchored = true
        parry_circle.CanCollide = false
        parry_circle.Transparency = 0.5
        parry_circle.Material = Enum.Material.Neon
        parry_circle.Color = Color3.new(1, 0, 0)
        parry_circle.Parent = workspace
    end

    parry_circle.Size = Vector3.new(0.2, auto_parry_distance * 2, auto_parry_distance * 2)
    parry_circle.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position) * CFrame.Angles(math.pi / 2, 0, 0)
end

-- Function to automatically parry balls
local function AutoParryBall()
    while auto_parry_enabled do
        if not player.Character then break end

        local character = player.Character
        local rootPart = character:FindFirstChild("HumanoidRootPart")

        if rootPart and tick() - last_parry_time > parry_delay then
            last_parry_time = tick()

            local nearby_ball = nil
            local min_distance = auto_parry_distance

            -- Find the nearest ball within range
            for _, ball in pairs(workspace:GetChildren()) do
                if ball.Name == "Ball" and ball:IsA("Part") then
                    local distance = (ball.Position - rootPart.Position).Magnitude
                    if distance <= min_distance then
                        nearby_ball = ball
                        min_distance = distance
                    end
                end
            end

            -- If a ball is within range, apply the parry logic
            if nearby_ball then
                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(1e4, 1e4, 1e4)
                bodyVelocity.Velocity = (nearby_ball.Position - rootPart.Position).unit * 100
                bodyVelocity.Parent = nearby_ball
                Debris:AddItem(bodyVelocity, 0.5) -- Clean up after parry
                print("Parried a ball!")
            end
        end
        task.wait(0.05)
    end
end

-- Function to automatically click when near a player
local function AutoClickNearby()
    while auto_click_enabled do
        if not player.Character then break end

        local character = player.Character
        local rootPart = character:FindFirstChild("HumanoidRootPart")

        if rootPart and tick() - last_click_time > click_interval then
            last_click_time = tick()

            -- Find the nearest player or NPC within range
            for _, target in pairs(workspace:GetChildren()) do
                if target:IsA("Model") and target ~= character and target:FindFirstChild("HumanoidRootPart") then
                    local distance = (target.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    if distance <= click_distance then
                        -- Simulate a click
                        game:GetService("VirtualUser"):CaptureController()
                        game:GetService("VirtualUser"):ClickButton1()
                        print("Auto-clicked on target!")
                        break
                    end
                end
            end
        end
        task.wait(0.05)
    end
end

-- Toggle to enable/disable auto-parry
local function ToggleAutoParry(state)
    auto_parry_enabled = state
    if state then
        task.spawn(AutoParryBall)
        -- Execute Red Circle Auto-Block
        getgenv().visualizer = true
        loadstring(game:HttpGet("https://raw.githubusercontent.com/1f0yt/community/main/RedCircleBlock"))()
        print("Auto-Parry and Red Circle Auto-Block Activated!")
    else
        print("Auto-Parry and Red Circle Auto-Block Disabled!")
    end
end

-- Toggle to enable/disable auto-click
local function ToggleAutoClick(state)
    auto_click_enabled = state
    if state then
        task.spawn(AutoClickNearby)
        print("Auto-Click Enabled!")
    else
        print("Auto-Click Disabled!")
    end
end

-- UI Setup
local BladeBall_Tab = Library_Window.Create_Tab({name = 'Blade Ball', icon = 'rbxassetid://6023426975'})
local BladeBall_Section = BladeBall_Tab.Create_Section({name = 'Auto Settings'})

-- Toggle for Auto-Parry
BladeBall_Section.Create_Toggle({
    name = 'Enable Auto-Parry',
    flag = 'Enable_Auto_Parry',
    callback = function(state)
        ToggleAutoParry(state)
    end
})

-- Toggle for Auto-Click
BladeBall_Section.Create_Toggle({
    name = 'Enable Auto-Click',
    flag = 'Enable_Auto_Click',
    callback = function(state)
        ToggleAutoClick(state)
    end
})

-- Slider for Click Distance
BladeBall_Section.Create_Slider({
    name = 'Click Distance',
    flag = 'Click_Distance',
    min = 2,
    max = 10,
    default = click_distance,
    callback = function(value)
        click_distance = value
    end
})

-- Slider for Click Interval
BladeBall_Section.Create_Slider({
    name = 'Click Interval',
    flag = 'Click_Interval',
    min = 0.05,
    max = 1,
    default = click_interval,
    callback = function(value)
        click_interval = value
    end
})

Library_Window:Show()

print("Auto-Parry and Auto-Clicker Script Loaded!")
