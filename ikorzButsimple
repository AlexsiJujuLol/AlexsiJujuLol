local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()

local Library_Success, Library = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua"))()
end)

if not Library_Success then
    warn("Failed to load Cloud UI Library: " .. tostring(Library))
    return
end

-- Configuration
getgenv().Paws = {
    ["AutoParry"] = false, -- Default disabled
    ["PingBased"] = true,
    ["PingBasedOffset"] = 0,
    ["DistanceToParry"] = 0.5,
    ["BallSpeedCheck"] = true,
    ["SpamDelay"] = 0.1,
    ["ShowParryEffect"] = false -- Default disabled
}

-- Variables
local PawsRemotes = ReplicatedStorage:WaitForChild("Remotes", 9e9)
local PawsBalls = Workspace:WaitForChild("Balls", 9e9)
local PawsTable = getgenv().Paws

-- Utility Functions
local function IsTheTarget()
    return Player.Character and Player.Character:FindFirstChild("Highlight")
end

local function FindBall()
    for _, v in pairs(PawsBalls:GetChildren()) do
        if v:GetAttribute("realBall") == true then
            return v
        end
    end
end

local function SendMouseClick(spamDelay)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, spamDelay)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, spamDelay)
end

local function ShowParryEffect()
    if not getgenv().Paws.ShowParryEffect then return end -- Only show effect if enabled

    local effect = Instance.new("Part")
    effect.Size = Vector3.new(1, 1, 1)
    effect.Shape = Enum.PartType.Ball
    effect.Color = Color3.fromRGB(0, 255, 0)
    effect.Position = Player.Character.HumanoidRootPart.Position
    effect.Anchored = true
    effect.Transparency = 0.5
    effect.Parent = Workspace

    local tween = TweenService:Create(effect, TweenInfo.new(0.5), {Size = Vector3.new(5, 5, 5), Transparency = 1})
    tween:Play()
    tween.Completed:Connect(function()
        effect:Destroy()
    end)
end

-- Main Script for Parry
local function AutoParryHandler()
    RunService.PreRender:Connect(function()
        if not FindBall() then return end

        local Ball = FindBall()
        local BallPosition = Ball.Position
        local BallVelocity = Ball.AssemblyLinearVelocity.Magnitude
        local Distance = Player:DistanceFromCharacter(BallPosition)
        local Ping = BallVelocity * (game.Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 1000)

        if PawsTable.PingBased then
            Distance -= Ping + PawsTable.PingBasedOffset
        end

        if PawsTable.BallSpeedCheck and BallVelocity == 0 then return end

        if (Distance / BallVelocity) <= PawsTable.DistanceToParry and IsTheTarget() and PawsTable.AutoParry then
            SendMouseClick(PawsTable.SpamDelay)
            ShowParryEffect() -- Trigger parry effect
        end
    end)

    -- Spam Handler
    task.spawn(function()
        while task.wait() do
            if getgenv().DetectSpam then
                local Ball = FindBall()
                if Ball then
                    local TargetPlayer = Ball:GetAttribute("target")
                    if TargetPlayer == Player.Name or (Player.Character and Player.Character:FindFirstChild("Highlight")) then
                        SendMouseClick(PawsTable.SpamDelay)
                    end
                end
            end
        end
    end)
end

-- UI Setup
local Library_Window = Library.Add_Window("Auto Parry Settings")
local Paws_Tab = Library_Window.Create_Tab({name = "Paws Parry", icon = "rbxassetid://6023426975"})
local Paws_Section = Paws_Tab.Create_Section({name = "Auto Parry"})

Paws_Section.Create_Toggle({
    name = "Enable Auto-Parry",
    flag = "Enable_Auto_Parry",
    callback = function(state)
        getgenv().Paws.AutoParry = state
        if state then
            AutoParryHandler()
        else
            warn("Auto-Parry disabled")
        end
    end
})

Paws_Section.Create_Slider({
    name = "Ping-Based Offset",
    flag = "Ping_Offset",
    min = 0,
    max = 0.5,
    float = 0.01,
    callback = function(value)
        getgenv().Paws.PingBasedOffset = value
    end
})

Paws_Section.Create_Slider({
    name = "Distance to Parry",
    flag = "Distance_Parry",
    min = 0.1,
    max = 1,
    float = 0.01,
    callback = function(value)
        getgenv().Paws.DistanceToParry = value
    end
})

Paws_Section.Create_Toggle({
    name = "Enable Spam Clicks",
    flag = "Enable_Spam_Clicks",
    callback = function(state)
        getgenv().DetectSpam = state
    end
})

Paws_Section.Create_Slider({
    name = "Spam Delay",
    flag = "Spam_Delay",
    min = 0.05,
    max = 0.5,
    float = 0.01,
    callback = function(value)
        getgenv().Paws.SpamDelay = value
    end
})

Paws_Section.Create_Toggle({
    name = "Show Parry Effect",
    flag = "Show_Parry_Effect",
    callback = function(state)
        getgenv().Paws.ShowParryEffect = state
        if state then
            warn("Parry Effect Enabled")
        else
            warn("Parry Effect Disabled")
        end
    end
})
