local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()

local Library_Success, Library = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua"))()
end)

if not Library_Success then
    warn("Failed to load Cloud UI Library: " .. tostring(Library))
    return
end

-- Configuration
getgenv().Paws = {
    ["AutoParry"] = false, -- Default disabled
    ["PingBased"] = true,
    ["PingBasedOffset"] = 0,
    ["DistanceToParry"] = 0.5,
    ["BallSpeedCheck"] = true,
    ["SpamDelay"] = 0.1,
    ["ShowParryEffect"] = false -- Default disabled
}

-- Variables
local visualise = false -- Visualizer toggle
local sphere = nil -- For storing the visualizer part

-- Utility Functions
local function get_player()
    return Players.LocalPlayer
end

local function get_character()
    local player = get_player()
    return player and player.Character
end

local function get_humanoid_root_part()
    local char = get_character()
    return char and char:FindFirstChild("HumanoidRootPart")
end

local function get_ball()
    local ballContainer = Workspace:FindFirstChild("Balls")
    if not ballContainer then return nil end

    for _, v in pairs(ballContainer:GetChildren()) do
        if not v.Anchored then
            return v
        end
    end
    return nil
end

local function calculate_parry_distance()
    local ball = get_ball()
    if ball then
        local ping = get_player():GetNetworkPing() * 20
        return math.clamp(ball.Velocity.Magnitude / 2.4 + ping, 15, 200)
    end
    return 15
end

local function create_visualizer()
    -- Create the visualizer sphere
    sphere = Instance.new("Part")
    sphere.Shape = Enum.PartType.Ball
    sphere.Anchored = true
    sphere.CanCollide = false
    sphere.CastShadow = false
    sphere.Transparency = 1
    sphere.Material = Enum.Material.ForceField
    sphere.Parent = Workspace

    local hue = 0

    local function update_visualizer()
        if not visualise then
            sphere.Transparency = 1
            return
        end

        local humanoidRootPart = get_humanoid_root_part()
        if not humanoidRootPart then
            sphere.Transparency = 1
            return
        end

        sphere.Transparency = 0.5
        local parryDistance = calculate_parry_distance()
        sphere.Size = Vector3.new(parryDistance * 2, parryDistance * 2, parryDistance * 2)
        sphere.Position = humanoidRootPart.Position

        hue = (hue + 0.01) % 1
        sphere.Color = Color3.fromHSV(hue, 1, 1)
    end

    local function is_ball_within_visualizer(ball)
        local humanoidRootPart = get_humanoid_root_part()
        if not humanoidRootPart or not ball then
            return false
        end

        local distance = (humanoidRootPart.Position - ball.Position).Magnitude
        return distance <= sphere.Size.X / 2
    end

    local function parry_if_valid(ball)
        if ball and is_ball_within_visualizer(ball) and Player.Character:FindFirstChild("Highlight") then
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        end
    end

    RunService.RenderStepped:Connect(function()
        update_visualizer()

        local ball = get_ball()
        parry_if_valid(ball)
    end)

    local player = get_player()
    if player then
        player.CharacterAdded:Connect(function()
            wait(0.1)
            if visualise then
                update_visualizer()
            end
        end)
    end
end

-- Toggle Visualizer
local function toggle_visualizer(state)
    visualise = state
    if state then
        if not sphere then
            create_visualizer()
        end
        warn("Visualizer Enabled")
    else
        if sphere then
            sphere:Destroy()
            sphere = nil
        end
        warn("Visualizer Disabled")
    end
end

-- UI Setup
local Library_Window = Library.Add_Window("Auto Parry Settings")
local Paws_Tab = Library_Window.Create_Tab({name = "Paws Parry", icon = "rbxassetid://6023426975"})
local Paws_Section = Paws_Tab.Create_Section({name = "Auto Parry"})

Paws_Section.Create_Toggle({
    name = "Enable Auto-Parry",
    flag = "Enable_Auto_Parry",
    callback = function(state)
        getgenv().Paws.AutoParry = state
        toggle_visualizer(state) -- Enable or disable visualizer
        if state then
            warn("Auto-Parry enabled")
        else
            warn("Auto-Parry disabled")
        end
    end
})

Paws_Section.Create_Toggle({
    name = "Enable Visualizer",
    flag = "Enable_Visualizer",
    callback = function(state)
        toggle_visualizer(state)
    end
})
