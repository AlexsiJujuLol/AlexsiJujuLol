local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

-- UI and settings
local success, Library = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()
end)

if not success then
    warn("Failed to load Cloud UI Library: " .. Library)
    return
end

local Library_Window = Library.Add_Window('Auto Parry & Clicker Settings')

local BladeBall_Tab = Library_Window.Create_Tab({name = 'Blade Ball', icon = 'rbxassetid://6023426975'})
local BladeBall_Section = BladeBall_Tab.Create_Section({name = 'Auto Settings'})

-- Toggle to enable or disable auto-parry
BladeBall_Section.Create_Toggle({
    name = 'Enable Auto-Parry',
    flag = 'Enable_Auto_Parry',
    callback = function(state)
        getgenv().Auto_Parry = state
        -- Enable or disable visualizer (Red Circle)
        if state then
            getgenv().visualizer = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/1f0yt/community/main/RedCircleBlock"))() -- Load the red circle visualizer
        else
            getgenv().visualizer = false
        end
    end
})

-- Other UI elements (like curve direction, curve force, AI play mode, etc.)

Library_Window:Show()

-- Auto-parry logic
local Ball_Properties = {}
local Player_Properties = {}
local Logic_Properties = {}

local function Get_Ball()
    for _, Ball in ipairs(workspace.Balls:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            return Ball
        end
    end
end

RunService.PreSimulation:Connect(function()
    -- Update player and ball information
    local HRP = Player.Character:FindFirstChild("HumanoidRootPart")

    if not HRP then
        for aa in pairs(Player_Properties) do
            Player_Properties[aa] = nil
        end
        return
    end

    Player_Properties.Position = HRP.Position
    Player_Properties.Speed = HRP.Velocity.Magnitude
    Player_Properties.Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()

    local Ball = Get_Ball()

    if not Ball then
        for a in pairs(Ball_Properties) do
            Ball_Properties[a] = nil
        end
        return
    end

    Ball_Properties.Ball = Ball
    Ball_Properties.Velocity = Ball.Velocity
    Ball_Properties.Speed = Ball_Properties.Velocity.Magnitude
    Ball_Properties.Position = Ball.Position
    Ball_Properties.Target = Ball:GetAttribute("target")
end)

workspace.Balls.ChildAdded:Connect(function()
    Ball_Properties.Ball:GetAttributeChangedSignal("target"):Connect(function()
        Logic_Properties.Parried = false
    end)
end)

RunService.Heartbeat:Connect(function() -- Main auto parry loop
    if not getgenv().Auto_Parry or not Ball_Properties.Ball or Ball_Properties.Target ~= Player.Name or Logic_Properties.Parried then
        return
    end

    if Player_Properties.Position:DistanceFromCharacter(Ball_Properties.Position) <= Ball_Properties.Speed + (Player_Properties.Ping / 1000) / math.pi then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0) -- Trigger parry
        Logic_Properties.Parried = true
        Logic_Properties.Cooldown = tick()

        if Logic_Properties.Parried and (tick() - Logic_Properties.Cooldown) >= 1 then
            Logic_Properties.Parried = false
        end
    end
end)
