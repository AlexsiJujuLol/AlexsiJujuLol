local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local Balls = workspace:WaitForChild("Balls", 9e9)

local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/main/Library.lua'))()

local Window = Library.Add_Window("Auto Parry")

local MainTab = Window.Create_Tab({ name = "Main" })

local MainSection = MainTab.Create_Section({ name = "Auto Parry Settings" })

local AutoParryEnabled = false

MainSection.Create_Toggle({
    name = "Enable Auto Parry",
    default = false,
    callback = function(state)
        AutoParryEnabled = state
        if state then
            print("Auto Parry Enabled")
        else
            print("Auto Parry Disabled")
        end
    end
})

local function get_player()
    return Players.LocalPlayer
end

local function get_character()
    local player = get_player()
    return player and player.Character
end

local function get_humanoid_root_part()
    local char = get_character()
    return char and char:FindFirstChild("HumanoidRootPart")
end

local function get_ball()
    local ballContainer = workspace:FindFirstChild("Balls")
    if not ballContainer then return nil end

    for _, v in pairs(ballContainer:GetChildren()) do
        if not v.Anchored then
            return v
        end
    end
    return nil
end

local function calculate_parry_distance()
    local ball = get_ball()
    if ball then
        local ping = get_player():GetNetworkPing() * 20
        return math.clamp(ball.Velocity.Magnitude / 2.4 + ping, 15, 200)
    end
    return 15
end

local function parry_if_valid(ball)
    local humanoidRootPart = get_humanoid_root_part()
    if ball and humanoidRootPart and (humanoidRootPart.Position - ball.Position).Magnitude <= calculate_parry_distance() then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
    end
end

local function create_visualizer()
    local sphere = Instance.new("Part")
    sphere.Shape = Enum.PartType.Ball
    sphere.Anchored = true
    sphere.CanCollide = false
    sphere.CastShadow = false
    sphere.Transparency = 1
    sphere.Material = Enum.Material.ForceField
    sphere.Parent = workspace

    local hue = 0

    local function update_visualizer()
        if not AutoParryEnabled then
            sphere.Transparency = 1
            return
        end

        local humanoidRootPart = get_humanoid_root_part()
        if not humanoidRootPart then
            sphere.Transparency = 1
            return
        end

        sphere.Transparency = 0.5
        local parryDistance = calculate_parry_distance()
        sphere.Size = Vector3.new(parryDistance * 2, parryDistance * 2, parryDistance * 2)
        sphere.Position = humanoidRootPart.Position

        hue = (hue + 0.01) % 1
        sphere.Color = Color3.fromHSV(hue, 1, 1)
    end

    RunService.RenderStepped:Connect(function()
        if AutoParryEnabled then
            local ball = get_ball()
            update_visualizer()
            parry_if_valid(ball)
        end
    end)
end

create_visualizer()

Library.Notify({
    Title = "Auto Parry",
    Content = "UI Loaded. Use the toggle to enable or disable Auto Parry.",
    Duration = 5
})
