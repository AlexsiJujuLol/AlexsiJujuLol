local Library
local success, err = pcall(function()
    Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()
end)

if not success then
    warn("Failed to load Library: " .. err)
    return
end

local player = game.Players.LocalPlayer
if not player then
    warn("This script must be run as a LocalScript.")
    return
end

-- Create the UI window
local BladeBall_Tab = Library.Add_Window('Acceptions')
local BladeBall_Section = BladeBall_Tab.Create_Section()

-- Auto parry settings
local auto_parry_enabled = false
local auto_parry_distance = 10
local show_parry_circle = false
local parry_circle = nil

-- Update the parry circle's position and size
local function UpdateParryCircle()
    if not show_parry_circle then
        if parry_circle then
            parry_circle:Destroy()
            parry_circle = nil
        end
        return
    end

    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end

    if not parry_circle then
        parry_circle = Instance.new("Part")
        parry_circle.Shape = Enum.PartType.Cylinder
        parry_circle.Anchored = true
        parry_circle.CanCollide = false
        parry_circle.Transparency = 0.5
        parry_circle.Material = Enum.Material.Neon
        parry_circle.Color = Color3.new(1, 0, 0)
        parry_circle.Parent = workspace
    end

    parry_circle.Size = Vector3.new(0.2, auto_parry_distance * 2, auto_parry_distance * 2)
    parry_circle.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position) * CFrame.Angles(math.pi / 2, 0, 0)
end

-- Continuously update the parry circle's position as the player moves
local function UpdateCirclePosition()
    while auto_parry_enabled and show_parry_circle and parry_circle do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            parry_circle.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position) * CFrame.Angles(math.pi / 2, 0, 0)
        end
        task.wait(0.05)
    end
end

-- Auto parry logic: automatically parries the ball when within range
local function AutoParryBall()
    while auto_parry_enabled do
        if not player.Character then return end

        local character = player.Character
        local rootPart = character:FindFirstChild("HumanoidRootPart")

        if rootPart then
            -- Look for nearby balls in the workspace
            for _, ball in pairs(workspace:GetChildren()) do
                if ball.Name == "Ball" and ball:IsA("Part") then
                    local distance = (ball.Position - rootPart.Position).Magnitude
                    if distance <= auto_parry_distance then
                        -- Simulate a parry: applying force to the ball or triggering touch
                        local bodyVelocity = Instance.new("BodyVelocity")
                        bodyVelocity.MaxForce = Vector3.new(10000, 10000, 10000)  -- Strong force in all directions
                        bodyVelocity.Velocity = (ball.Position - rootPart.Position).unit * 100  -- Hit the ball away
                        bodyVelocity.Parent = ball
                        game:GetService("Debris"):AddItem(bodyVelocity, 0.5)  -- Clean up after 0.5 seconds
                        
                        -- Optionally trigger a touch event (if ball has Touch event)
                        if ball:FindFirstChild("Touch") then
                            ball:Touch(rootPart)
                        end
                    end
                end
            end
        end
        task.wait(0.1)
    end
end

-- Create the Auto Parry Tab
local AutoParry_Tab = Library.Add_Window('Auto Parry')
local AutoParry_Section = AutoParry_Tab.Create_Section()

-- Toggle the Auto Parry feature on/off
AutoParry_Section.Create_Toggle({
    name = 'Auto Parry (Hit Ball)',
    flag = 'Auto_Parry_Hit',
    callback = function(state)
        auto_parry_enabled = state
        if state then
            task.spawn(UpdateCirclePosition)  -- Start updating the circle's position
            task.spawn(AutoParryBall)  -- Start the auto parry process
        end
    end
})

-- Slider to adjust the parry distance
AutoParry_Section.Create_Slider({
    name = 'Parry Distance',
    flag = 'Parry_Distance',
    min = 5,
    max = 50,
    default = auto_parry_distance,
    callback = function(value)
        auto_parry_distance = value
        UpdateParryCircle()  -- Update the circle whenever the distance changes
    end
})

-- Toggle to show or hide the parry circle
AutoParry_Section.Create_Toggle({
    name = 'Show Parry Circle',
    flag = 'Show_Parry_Circle',
    callback = function(state)
        show_parry_circle = state
        UpdateParryCircle()  -- Update the circle's visibility
    end
})
